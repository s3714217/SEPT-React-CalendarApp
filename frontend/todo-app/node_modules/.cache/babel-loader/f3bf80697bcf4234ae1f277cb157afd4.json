{"ast":null,"code":"import _classCallCheck from \"/Users/mohammed/Desktop/RMIT1950/COSC2299-Software-Engineering/Major Project/Avengers/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammed/Desktop/RMIT1950/COSC2299-Software-Engineering/Major Project/Avengers/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../Constants\";\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeBasicAuthenticationService\",\n    value: function executeBasicAuthenticationService(username, password) {\n      return axios.get(\"\".concat(API_URL, \"/basicauth\"), {\n        headers: {\n          authorization: this.createBasicAuthToken(username, password)\n        }\n      });\n    }\n  }, {\n    key: \"executeJwtAuthenticationService\",\n    value: function executeJwtAuthenticationService(username, password) {\n      return axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n        username: username,\n        password: password\n      });\n    }\n  }, {\n    key: \"RegisterAuthenticationService\",\n    value: function RegisterAuthenticationService(user) {\n      return axios.post(\"\".concat(API_URL, \"/user\"), user);\n    }\n  }, {\n    key: \"DeleteUserAuthenticationService\",\n    value: function DeleteUserAuthenticationService(username) {\n      return axios.delete(\"\".concat(API_URL, \"/user\"), username);\n    }\n  }, {\n    key: \"createBasicAuthToken\",\n    value: function createBasicAuthToken(username, password) {\n      return \"Basic \" + window.btoa(username + \":\" + password);\n    }\n  }, {\n    key: \"registerSuccessfulLogin\",\n    value: function registerSuccessfulLogin(username, password) {\n      //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n      //console.log('registerSuccessfulLogin')\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n    }\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return \"Bearer \" + token;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return \"\";\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/mohammed/Desktop/RMIT1950/COSC2299-Software-Engineering/Major Project/Avengers/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","post","user","delete","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","getItem","interceptors","request","use","config","isUserLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;;;;;;;sDAC8BC,Q,EAAUC,Q,EAAU;AACpD,aAAOL,KAAK,CAACM,GAAN,WAAaL,OAAb,iBAAkC;AACvCM,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAD8B,OAAlC,CAAP;AAGD;;;oDAE+BD,Q,EAAUC,Q,EAAU;AAClD,aAAOL,KAAK,CAACU,IAAN,WAAcT,OAAd,oBAAsC;AAC3CG,QAAAA,QAAQ,EAARA,QAD2C;AAE3CC,QAAAA,QAAQ,EAARA;AAF2C,OAAtC,CAAP;AAID;;;kDAE6BM,I,EAAM;AAClC,aAAOX,KAAK,CAACU,IAAN,WAAcT,OAAd,YAA8BU,IAA9B,CAAP;AACD;;;oDAE+BP,Q,EAAU;AACxC,aAAOJ,KAAK,CAACY,MAAN,WAAgBX,OAAhB,YAAgCG,QAAhC,CAAP;AACD;;;yCAEoBA,Q,EAAUC,Q,EAAU;AACvC,aAAO,WAAWQ,MAAM,CAACC,IAAP,CAAYV,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACD;;;4CAEuBD,Q,EAAUC,Q,EAAU;AAC1C;AACA;AACAU,MAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDE,QAAzD;AACA,WAAKa,sBAAL,CAA4B,KAAKR,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACD;;;kDAE6BD,Q,EAAUc,K,EAAO;AAC7CH,MAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDE,QAAzD;AACA,WAAKa,sBAAL,CAA4B,KAAKE,cAAL,CAAoBD,KAApB,CAA5B;AACD;;;mCAEcA,K,EAAO;AACpB,aAAO,YAAYA,KAAnB;AACD;;;6BAEQ;AACPH,MAAAA,cAAc,CAACK,UAAf,CAA0BlB,gCAA1B;AACD;;;qCAEgB;AACf,UAAIS,IAAI,GAAGI,cAAc,CAACM,OAAf,CAAuBnB,gCAAvB,CAAX;AACA,UAAIS,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACD;;;0CAEqB;AACpB,UAAIA,IAAI,GAAGI,cAAc,CAACM,OAAf,CAAuBnB,gCAAvB,CAAX;AACA,UAAIS,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACD;;;2CAEsBO,K,EAAO;AAAA;;AAC5BlB,MAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACvC,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACzBD,UAAAA,MAAM,CAAClB,OAAP,CAAeC,aAAf,GAA+BU,KAA/B;AACD;;AACD,eAAOO,MAAP;AACD,OALD;AAMD;;;;;;AAGH,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"../../Constants\";\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: { authorization: this.createBasicAuthToken(username, password) }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  RegisterAuthenticationService(user) {\n    return axios.post(`${API_URL}/user`, user);\n  }\n\n  DeleteUserAuthenticationService(username) {\n    return axios.delete(`${API_URL}/user`, username);\n  }\n\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return \"Bearer \" + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n      return config;\n    });\n  }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}